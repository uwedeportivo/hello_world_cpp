load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

refresh_compile_commands(
    name = "refresh_compile_commands",

    # Specify the targets of interest.
    # For example, specify a dict of targets and any flags required to build.
    targets = {
      "//:hello_world": "",
    },
    # No need to add flags already in .bazelrc. They're automatically picked up.
    # If you don't need flags, a list of targets is also okay, as is a single target string.
    # Wildcard patterns, like //... for everything, *are* allowed here, just like a build.
      # As are additional targets (+) and subtractions (-), like in bazel query https://docs.bazel.build/versions/main/query.html#expressions
    # And if you're working on a header-only library, specify a test or binary target that compiles it.
)

cc_library(
    name = "sqlitecpp",
    srcs = glob(["SQLiteCpp/src/*.cpp"]),
    hdrs = glob(["SQLiteCpp/include/SQLiteCpp/*.h"]),
    copts = ["-Isqlite3"],
    defines = [
        "SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION",
        "SQLITE_OMIT_LOAD_EXTENSION",
    ],
    strip_include_prefix = "SQLiteCpp/include",
    deps = [
        "@sqlite3",
    ],
)

cc_library(
    name = "peg",
    hdrs = ["cpp-peglib/peglib.h"],
    deps = [],
)

cc_binary(
    name = "hello_world",
    srcs = ["hello_world.cc"],
    deps = [
        ":greeting_cc_proto",
        ":peg",
        ":sqlitecpp",
        "//marl",
        "@abseil-cpp//absl/strings",
        "@openssl//:crypto",
        "@openssl//:ssl",
    ],
)

cc_proto_library(
    name = "greeting_cc_proto",
    deps = [":greeting_proto"],
)

proto_library(
    name = "greeting_proto",
    srcs = ["greeting.proto"],
)

cc_test(
    name = "hello_world_test",
    size = "small",
    srcs = ["hello_world_test.cc"],
    deps = [
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)
